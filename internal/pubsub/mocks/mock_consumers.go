// Code generated by MockGen. DO NOT EDIT.
// Source: simplecrm/internal/pubsub (interfaces: UserCreatedEventServicer)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./internal/pubsub/mocks/mock_consumers.go simplecrm/internal/pubsub UserCreatedEventServicer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	db "simplecrm/internal/db"
	pubsub "simplecrm/internal/pubsub"

	gomock "go.uber.org/mock/gomock"
)

// MockUserCreatedEventServicer is a mock of UserCreatedEventServicer interface.
type MockUserCreatedEventServicer struct {
	ctrl     *gomock.Controller
	recorder *MockUserCreatedEventServicerMockRecorder
	isgomock struct{}
}

// MockUserCreatedEventServicerMockRecorder is the mock recorder for MockUserCreatedEventServicer.
type MockUserCreatedEventServicerMockRecorder struct {
	mock *MockUserCreatedEventServicer
}

// NewMockUserCreatedEventServicer creates a new mock instance.
func NewMockUserCreatedEventServicer(ctrl *gomock.Controller) *MockUserCreatedEventServicer {
	mock := &MockUserCreatedEventServicer{ctrl: ctrl}
	mock.recorder = &MockUserCreatedEventServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCreatedEventServicer) EXPECT() *MockUserCreatedEventServicerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockUserCreatedEventServicer) Consume(ctx context.Context, f func(pubsub.UserCreatedEvent)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", ctx, f)
}

// Consume indicates an expected call of Consume.
func (mr *MockUserCreatedEventServicerMockRecorder) Consume(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockUserCreatedEventServicer)(nil).Consume), ctx, f)
}

// Publish mocks base method.
func (m *MockUserCreatedEventServicer) Publish(ctx context.Context, user db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockUserCreatedEventServicerMockRecorder) Publish(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockUserCreatedEventServicer)(nil).Publish), ctx, user)
}
