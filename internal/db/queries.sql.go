// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, created_at FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id string) (User, error) {
	row := db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const insertAndReturnUser = `-- name: InsertAndReturnUser :one
INSERT INTO users (id, first_name, last_name, email) VALUES (?, ?, ?, ?) RETURNING id, first_name, last_name, email, created_at
`

type InsertAndReturnUserParams struct {
	ID        string `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) InsertAndReturnUser(ctx context.Context, db DBTX, arg InsertAndReturnUserParams) (User, error) {
	row := db.QueryRowContext(ctx, insertAndReturnUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
